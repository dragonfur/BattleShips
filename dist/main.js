(()=>{"use strict";var t={d:(e,a)=>{for(var r in a)t.o(a,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:a[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{t7:()=>B,ST:()=>G,_O:()=>w,cg:()=>E,J6:()=>H,gx:()=>Y});const e=class{constructor(t){this.name=t,this.currentrow,this.currentcol}attack(t,e,a){return!1!==a.board[t][e].canHit&&!!a.receiveAttack(t,e)}randomAttack(t){let e,a;do{e=Math.floor(10*Math.random()),a=Math.floor(10*Math.random())}while(!1===t.board[e][a].canHit);const r=t.receiveAttack(e,a);return this.grabCoords(e,a),!!r}grabCoords(t,e){return void 0===t||void 0===e?{y:this.currentrow,x:this.currentcol}:(this.currentrow=t,void(this.currentcol=e))}randomPlacement(t,e){let a,r,n;do{a=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),n=this.verticalRandomizer()}while(!1===t.canPlace(e,parseInt(a),parseInt(r),n));t.placeShip(e,parseInt(a),parseInt(r),n)}verticalRandomizer(){const t=1*Math.random();return t>=.5||!(t<.5)&&void 0}},a=class{constructor(){this.board=[],this.createGrid(10)}createGrid(t){for(let e=0;e<t;e++){this.board[e]=[];for(let a=0;a<t;a++)this.board[e][a]={canHit:!0}}}placeShip(t,e,a,r){if(!1!==this.canPlace(t,e,a,r))if(r)for(let r=0;r<t.length;r++)this.board[e+r][a]={ShipInfo:t,hasShip:!0,canHit:!0};else for(let r=0;r<t.length;r++)this.board[e][a+r]={ShipInfo:t,hasShip:!0,canHit:!0}}receiveAttack(t,e){if(this.board[t][e].canHit=!1,!0===this.board[t][e].hasShip){let a=this.board[t][e].ShipInfo.hits.length+1;return this.board[t][e].ShipInfo.hit(a),!0}return!1}canAttack(t,e){return!1!==this.board[t][e].canHit&&(!0===this.board[t][e].canHit||void 0)}isGameOver(){let t;for(let e=0;e<this.board.length;e++)for(let a=0;a<this.board[0].length;a++)if(!0===this.board[e][a].hasShip){if(!this.board[e][a].ShipInfo.isSunk())return!1;t=!0}return t}canPlace(t,e,a,r){if(r){if(parseInt(e)+parseInt(t.length)>10)return!1}else if(a+t.length>10)return!1;if(r){for(let r=0;r<t.length;r++)if("hasShip"in this.board[e+r][a]&&!0===this.board[e+r][a].hasShip)return!1}else for(let r=0;r<t.length;r++)if("hasShip"in this.board[e][a+r]&&!0===this.board[e][a+r].hasShip)return!1;return!0}},r=class{constructor(t,e){this.name=t,this.length=e,this.hits=[]}hit(t){this.hits.includes(t)||this.hits.push(t)}isSunk(){return this.hits.length===this.length}};function n(t,e,a){switch(e){case 0:t.textContent=`That's not the board, ${a}.`;break;case 1:t.textContent=`You can't place it there, ${a}.`;break;case 2:t.textContent=`We know there's nothing there, ${a}! Pick a different spot.`}}function o(t,e,a){t.textContent=`${e} has sunk all of ${a}'s ships.`;const r=document.createElement("button");r.textContent="Play again?",r.classList.add("Start"),r.addEventListener("click",(()=>{w()})),setTimeout((()=>{t.appendChild(r)}),4e3)}let s,i,d,c;function l(t,e,a,r,n){if(console.log(e),s=t,i=e,d=a,c=r,n){const e=t.randomAttack(i),a=t.grabCoords(),r=document.querySelector(`[data-ycoord='${a.y}'][data-xcoord='${a.x}']`);return e?(console.log("PLAYER 2 HIT YOU"),r.setAttribute("id","hit"),G(i,a.y,a.x),void B()):(console.log("PLAYER 2 MISSED YOU"),r.setAttribute("id","miss"),void B())}a.addEventListener("click",h)}function h(t){t.target.classList.contains("cell")?!0===i.canAttack(parseInt(t.target.dataset.ycoord),parseInt(t.target.dataset.xcoord))?s.attack(parseInt(t.target.dataset.ycoord),parseInt(t.target.dataset.xcoord),i)?(console.log("YOU HIT PLAYER 2"),t.target.setAttribute("id","hit"),G(i,t.target.dataset.ycoord,t.target.dataset.xcoord),B()):(console.log("YOU MISSED PLAYER 2"),B(),t.target.setAttribute("id","miss")):(n(c,2,s.name),l(s,i,d,c,!1)):(n(c,1,s.name),l(s,i,d,c,!1))}const u=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}],p=document.querySelector('[data-id="start"]'),m=document.querySelector('[data-id="status"]'),f=document.querySelector('[data-id="playerOneNameSelector"]'),g=document.querySelector('[data-id="enterName"]'),y=document.querySelector('[data-id="nameChosenPlayerOne"]'),C=document.querySelector('[data-id="playerGridName"]'),v=document.querySelector('[data-id="gridPlayerOne"]'),b=document.querySelector('[data-id="gridPlayerTwo"]');let S;p.addEventListener("click",(()=>{p.style.display="none",f.style.display="flex"})),g.addEventListener("click",(()=>{let t="mate";var a;""===y.value?(C.textContent="YOUR FLEET",t="Captain"):(t=y.value,C.textContent=`${t.toUpperCase()}'S FLEET`,y.value=""),f.style.display="none",m.textContent=`Time to place your ships, ${t}.`,a=m,setTimeout((()=>{a.textContent="Let's start with your biggest ship, the Carrier."}),3e3),setTimeout((()=>{E(0)}),6e3),$(x,v,"player1"),$(L,b,"player2"),S=new e(`${t}`)}));let x=new a,L=new a,I=new e("Mr. Bot");function w(){x=new a,L=new a,function(){v.innerHTML="";for(let t=0;t<11;t++){const e=document.createElement("div");e.classList.add("cellCoord"),e.classList.add("yCoord"),0===t?(e.textContent="",v.appendChild(e)):(e.textContent=`${String.fromCharCode(64+t)}`,v.appendChild(e))}b.innerHTML="";for(let t=0;t<11;t++){const e=document.createElement("div");e.classList.add("cellCoord"),e.classList.add("yCoord"),10===t?(e.textContent="",b.appendChild(e)):(e.textContent=`${String.fromCharCode(65+t)}`,b.appendChild(e))}}(),$(x,v,"player1"),$(L,b,"player2"),E(0),P=1,T=!1,U="playerOne"}function $(t,e,a){for(let r=0;r<t.board.length;r++)for(let n=-1;n<t.board.length;n++)if("player1"===a)if(-1===n){const t=document.createElement("div");t.textContent=`${r+1}`,t.setAttribute("class","cellCoord"),e.appendChild(t)}else{const t=document.createElement("div");t.setAttribute("class","cell"),t.setAttribute("data-yCoord",r),t.setAttribute("data-xCoord",n),e.appendChild(t)}else if("player2"===a)if(n<9){const t=document.createElement("div");t.setAttribute("class","cell"),t.setAttribute("data-yCoord",r),t.setAttribute("data-xCoord",n+1),e.appendChild(t)}else{const t=document.createElement("div");t.textContent=`${r+1}`,t.setAttribute("class","cellCoord"),e.appendChild(t)}}function E(t){if(parseInt(t)===u.length)return e=m,a=S.name,e.textContent=`Alright, you're all set, ${a}.`,setTimeout((()=>{e.textContent="You're up for the first shot, let's get them!"}),1500),setTimeout((()=>{e.textContent=""}),4e3),u.forEach((t=>{let e=new r(t.name,t.length);I.randomPlacement(L,e)})),void B();var e,a;let n=new r(u[t].name,u[t].length);!function(t,e){if("Carrier"===e.name)t.textContent="Where would you like to place your Carrier?",H(),Y();else if("Battleship"===e.name)t.textContent="How about the Battleship?",H(),Y();else if("Cruiser"===e.name)t.textContent="How about the Cruiser ship?",H(),Y();else if("Submarine"===e.name)t.textContent="Can't forget about our Submarines now, can we?",H(),Y();else{if("Destroyer"!==e.name)return;t.textContent="Last, but not least, our 'Destroyer'?",H(),Y()}}(m,n),k=n}let k,A,O,P=1,T=!1;function q(t){return t?"Vertical":"Horizontal"}function H(){const t=function(t){const e=document.createElement("button");return e.classList.add("changeDirection"),t.appendChild(e),e}(m);t.textContent=q(T),t.addEventListener("click",(()=>{T=!T,t.textContent=q(T)})),v.addEventListener("click",M,{once:!0})}function M(t){t.target.classList.contains("cell")?!0===x.canPlace(k,parseInt(t.target.dataset.ycoord),parseInt(t.target.dataset.xcoord),T)?(function(t){if(t.target.classList.add(`${O.name.toLowerCase()}`),T)for(let t=0;t<O.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)+t}"][data-xcoord="${parseInt(A.col)}"]`).classList.add(`${O.name.toLowerCase()}`);else for(let t=0;t<O.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)}"][data-xcoord="${parseInt(A.col)+t}"]`).classList.add(`${O.name.toLowerCase()}`)}(t),x.placeShip(k,parseInt(t.target.dataset.ycoord),parseInt(t.target.dataset.xcoord),T),v.removeEventListener("mouseover",R),v.removeEventListener("mouseleave",D),E(P),P++):(n(m,1,S.name),H()):(n(m,0,S.name),H())}function Y(){v.addEventListener("mouseover",R)}function R(t){if(t.target.classList.contains("cell")&&!0===x.canPlace(k,parseInt(t.target.dataset.ycoord),parseInt(t.target.dataset.xcoord),T)){if(t.target.classList.add("selected"),e=A={row:t.target.dataset.ycoord,col:t.target.dataset.xcoord},A=e,T)for(let t=0;t<k.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)+t}"][data-xcoord="${parseInt(A.col)}"]`).classList.add("selected");else for(let t=0;t<k.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)}"][data-xcoord="${parseInt(A.col)+t}"]`).classList.add("selected");O=k,t.target.addEventListener("mouseleave",D)}var e}function D(t){if(t.target.classList.remove("selected"),T)for(let t=0;t<O.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)+t}"][data-xcoord="${parseInt(A.col)}"]`).classList.remove("selected");else for(let t=0;t<O.length;t++)document.querySelector(`[data-ycoord="${parseInt(A.row)}"][data-xcoord="${parseInt(A.col)+t}"]`).classList.remove("selected")}let U="playerOne";function B(){let t;return t=("playerOne"===U?x:L).isGameOver(),t?("playerOne"===U?o(m,I.name,S.name):o(m,S.name,I.name),void b.removeEventListener("click",h)):"playerOne"===U?(U="playerTwo",void l(S,L,b,m,!1)):"playerTwo"===U?"Mr. Bot"===I.name?(U="playerOne",void l(I,x,v,m,!0)):(U="playerOne",void l(I,x,v,m,!1)):void 0}function G(t,e,a){var r,n;t.board[e][a].ShipInfo.isSunk()&&(r=m,n=t.board[e][a].ShipInfo.name,r.textContent=`Ship down! You have sunk their ${n}.`,setTimeout((()=>{r.textContent=""}),4e3))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
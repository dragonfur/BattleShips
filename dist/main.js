(()=>{"use strict";var t={d:(e,a)=>{for(var r in a)t.o(a,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:a[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{c:()=>g,J:()=>S});const e=class{constructor(t){this.name=t}attack(t,e,a){!1!==a.board[t][e].canHit&&a.receiveAttack(t,e)}randomAttack(t){let e,a;do{e=Math.floor(10*Math.random()),a=Math.floor(10*Math.random())}while(!1===t.board[e][a].canHit);t.receiveAttack(e,a)}randomPlacement(t,e){let a,r,n;do{a=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),n=this.verticalRandomizer()}while(!1===t.canPlace(e,parseInt(a),parseInt(r),n));t.placeShip(e,parseInt(a),parseInt(r),n)}verticalRandomizer(){const t=1*Math.random();return t>=.5||!(t<.5)&&void 0}},a=class{constructor(){this.board=[],this.createGrid(10)}createGrid(t){for(let e=0;e<t;e++){this.board[e]=[];for(let a=0;a<t;a++)this.board[e][a]={canHit:!0}}}placeShip(t,e,a,r){if(!1!==this.canPlace(t,e,a,r))if(r)for(let r=0;r<t.length;r++)this.board[e+r][a]={ShipInfo:t,hasShip:!0,canHit:!0};else for(let r=0;r<t.length;r++)this.board[e][a+r]={ShipInfo:t,hasShip:!0,canHit:!0}}receiveAttack(t,e){if(this.board[t][e].canHit=!1,!0===this.board[t][e].hasShip){let a=this.board[t][e].ShipInfo.hits.length+1;this.board[t][e].ShipInfo.hit(a)}}canAttack(t,e){return!1!==this.board[t][e].canHit&&(!0===this.board[t][e].canHit||void 0)}isGameOver(){let t=!1;for(let e=0;e<this.board.length;e++)for(let a=0;a<this.board[0].length;a++)if(!0===this.board[e][a].hasShip)return this.board[e][a].ShipInfo.isSunk()?(t=!0,t):(t=!1,t)}canPlace(t,e,a,r){if(r&&e+t.length>10)return!1;if(a+t.length>10)return!1;if(r){for(let r=0;r<t.length;r++)if("hasShip"in this.board[e+r][a]&&!0===this.board[e+r][a].hasShip)return!1}else for(let r=0;r<t.length;r++)if("hasShip"in this.board[e][a+r]&&!0===this.board[e][a+r].hasShip)return!1;return!0}};function r(t,e){switch(e){case 0:t.textContent="That's not the board, mate.";break;case 1:t.textContent="You can't place it there, mate.";break;case 2:t.textContent="We know there's nothing there, captain! Pick a different spot."}}const n=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}],o=document.querySelector('[data-id="start"]'),i=document.querySelector('[data-id="status"]'),s=document.querySelector('[data-id="playerOneNameSelector"]'),l=document.querySelector('[data-id="enterName"]'),c=document.querySelector('[data-id="nameChosenPlayerOne"]'),h=document.querySelector('[data-id="playerGridName"]'),d=document.querySelector('[data-id="gridPlayerOne"]'),u=document.querySelector('[data-id="gridPlayerTwo"]');let p;o.addEventListener("click",(()=>{o.style.display="none",s.style.display="flex"})),l.addEventListener("click",(()=>{let t="mate";var a;""===c.value?h.textContent="YOUR FLEET":(t=c.value,h.textContent=`${t.toUpperCase()}'S FLEET`,c.value=""),s.style.display="none",i.textContent=`Time to place your ships, ${t}.`,a=i,setTimeout((()=>{a.textContent="Let's start with your biggest ship, the Carrier.",g(0)}),1e3),y(m,d,"player1"),y(b,u,"player2"),p=new e(`${t}`)}));let m=new a,b=new a,f=new e("Mr. Bot");function y(t,e,a){for(let r=0;r<t.board.length;r++)for(let n=-1;n<t.board.length;n++)if("player1"===a)if(-1===n){const t=document.createElement("div");t.textContent=`${r+1}`,t.setAttribute("class","cellCoord"),e.appendChild(t)}else{const t=document.createElement("div");t.setAttribute("class","cell"),t.setAttribute("data-yCoord",r),t.setAttribute("data-xCoord",n),e.appendChild(t)}else if("player2"===a)if(n<9){const t=document.createElement("div");t.setAttribute("class","cell"),t.setAttribute("data-yCoord",r),t.setAttribute("data-xCoord",n+1),e.appendChild(t)}else{const t=document.createElement("div");t.textContent=`${r+1}`,t.setAttribute("class","cellCoord"),e.appendChild(t)}}function g(t){if(5===t)return console.log(p),i.textContent="Alright, you're all set mate!",n.forEach((t=>{f.randomPlacement(b,t)})),void console.log(b);const e=new class{constructor(t,e){this.name=t,this.length=e,this.hits=[]}hit(t){this.hits.includes(t)||this.hits.push(t)}isSunk(){return this.hits.length===this.length}}(n[t].name,n[t].length);!function(t,e){switch(e.name){case"Carrier":t.textContent="Where would you like to place your Carrier?",S(e);break;case"Battleship":t.textContent="How about the Battleship?",S(e);break;case"Cruiser":t.textContent="How about the Cruiser ship?",S(e);break;case"Submarine":t.textContent="Can't forget about our submarines now, can we?",S(e);break;case"Destroyer":t.textContent="Last, but not least, our 'Destroyer'?",S(e)}}(i,e)}let C=1;function S(t){d.addEventListener("click",(e=>{e.target.classList.contains("cell")?!0===m.canPlace(t,parseInt(e.target.dataset.ycoord),parseInt(e.target.dataset.xcoord),!1)?(m.placeShip(t,parseInt(e.target.dataset.ycoord),parseInt(e.target.dataset.xcoord),!1),g(C),console.log(m.board),C++):(r(i,1),S(t)):(r(i,0),S(t))}),{once:!0})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU9sQyxLQUFLNkIsS0FBS0wsU0FBV3hCLEtBQUt3QixTRG1HZmUsRUFBZStCLEdBQVl2RSxLQUFNd0MsRUFBZStCLEdBQVk5QyxTRDNGdEYsU0FBNkJZLEVBQVF3QyxHQUNyQyxPQUFRQSxFQUFTN0UsTUFDYixJQUFLLFVBQ0RxQyxFQUFPRSxZQUFjLDhDQUNyQnVDLEVBQVlELEdBQ1osTUFDSixJQUFLLGFBQ0R4QyxFQUFPRSxZQUFjLDRCQUNyQnVDLEVBQVlELEdBQ1osTUFDSixJQUFLLFVBQ0R4QyxFQUFPRSxZQUFjLDhCQUNyQnVDLEVBQVlELEdBQ1osTUFDSixJQUFLLFlBQ0R4QyxFQUFPRSxZQUFjLGlEQUNyQnVDLEVBQVlELEdBQ1osTUFDSixJQUFLLFlBQ0R4QyxFQUFPRSxZQUFjLHdDQUNyQnVDLEVBQVlELElDd0VoQkUsQ0FBb0JuQyxFQUFZOUIsR0FHcEMsSUFBSWtFLEVBQUksRUFDUixTQUFTRixFQUFZaEUsR0FDakJtQyxFQUFjRyxpQkFBaUIsU0FBVTZCLElBQ2pDQSxFQUFFQyxPQUFPQyxVQUFVQyxTQUFTLFNBQzJGLElBQW5IdkIsRUFBbUI1QyxTQUFTSCxFQUFNSSxTQUFTK0QsRUFBRUMsT0FBT0csUUFBUUMsUUFBU3BFLFNBQVMrRCxFQUFFQyxPQUFPRyxRQUFRRSxTQUFTLElBQ3hHMUIsRUFBbUIxQyxVQUFVTCxFQUFNSSxTQUFTK0QsRUFBRUMsT0FBT0csUUFBUUMsUUFBU3BFLFNBQVMrRCxFQUFFQyxPQUFPRyxRQUFRRSxTQUFTLEdBQ3pHNUIsRUFBWXFCLEdBQ1pSLFFBQVFDLElBQUlaLEVBQW1CdkQsT0FDL0IwRSxNQUVBNUMsRUFBYVEsRUFBWSxHQUN6QmtDLEVBQVloRSxLQUdoQnNCLEVBQWFRLEVBQVksR0FDekJrQyxFQUFZaEUsTUFFakIsQ0FBQzBFLE1BQU0sTSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXBzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXBzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL1BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9HYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9zcmMvRG9tTWFuaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcHMvLi9zcmMvU2hpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgfVxuXG4gICAgYXR0YWNrKHJvdywgY29sLCBnYW1lYm9hcmQpIHtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5ib2FyZFtyb3ddW2NvbF0uY2FuSGl0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhyb3csIGNvbClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJhbmRvbUF0dGFjayhnYW1lYm9hcmQpIHtcbiAgICAgICAgbGV0IHJvd1xuICAgICAgICBsZXQgY29sXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgICAgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGdhbWVib2FyZC5ib2FyZFtyb3ddW2NvbF0uY2FuSGl0ID09PSBmYWxzZSlcbiAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2socm93LCBjb2wpXG4gICAgfVxuXG4gICAgcmFuZG9tUGxhY2VtZW50KGdhbWVib2FyZCwgc2hpcCkge1xuICAgICAgICBsZXQgcm93XG4gICAgICAgIGxldCBjb2xcbiAgICAgICAgbGV0IHZlcnRpY2FsXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgICAgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgICAgICB2ZXJ0aWNhbCA9IHRoaXMudmVydGljYWxSYW5kb21pemVyKClcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmNhblBsYWNlKHNoaXAsIHBhcnNlSW50KHJvdyksIHBhcnNlSW50KGNvbCksIHZlcnRpY2FsKSA9PT0gZmFsc2UpXG4gICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcCwgcGFyc2VJbnQocm93KSwgcGFyc2VJbnQoY29sKSwgdmVydGljYWwpXG4gICAgfVxuXG4gICAgdmVydGljYWxSYW5kb21pemVyKCkge1xuICAgICAgICBjb25zdCBJc1ZlcnRpY2FsID0gTWF0aC5yYW5kb20oKSAqIDFcbiAgICAgICAgaWYgKElzVmVydGljYWwgPj0gMC41KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKElzVmVydGljYWwgPCAwLjUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXIiLCJpbXBvcnQgU2hpcCBmcm9tICcuL1NoaXAuanMnXG5cbmNsYXNzIEdhbWVib2FyZCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IFtdXG4gICAgICAgIHRoaXMuY3JlYXRlR3JpZCgxMClcbiAgICB9XG5cbiAgICBjcmVhdGVHcmlkKHNpemUpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgc2l6ZTsgcm93KyspIHtcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbcm93XSA9IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBzaXplOyBjb2wrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2xdID0ge1xuICAgICAgICAgICAgICAgICAgICBjYW5IaXQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxhY2VTaGlwKFNoaXAsIHJvdywgY29sLCB2ZXJ0aWNhbCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY2FuUGxhY2UoU2hpcCwgcm93LCBjb2wsIHZlcnRpY2FsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFNoaXAubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB0aGlzLmJvYXJkW3JvdyArIGldW2NvbF0gPSB7XG4gICAgICAgICAgICAgICAgU2hpcEluZm86IFNoaXAsXG4gICAgICAgICAgICAgICAgaGFzU2hpcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYW5IaXQ6IHRydWUsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IFNoaXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW3Jvd11bY29sICsgal0gPSB7XG4gICAgICAgICAgICAgICAgICAgIFNoaXBJbmZvOiBTaGlwLFxuICAgICAgICAgICAgICAgICAgICBoYXNTaGlwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjYW5IaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVjZWl2ZUF0dGFjayhyb3csIGNvbCkge1xuICAgICAgICB0aGlzLmJvYXJkW3Jvd11bY29sXS5jYW5IaXQgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy5ib2FyZFtyb3ddW2NvbF0uaGFzU2hpcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGhpdGluZGV4ID0gKHRoaXMuYm9hcmRbcm93XVtjb2xdLlNoaXBJbmZvLmhpdHMubGVuZ3RoKSArIDFcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2xdLlNoaXBJbmZvLmhpdChoaXRpbmRleClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbkF0dGFjayhyb3csIGNvbCkge1xuICAgICAgICBpZiAodGhpcy5ib2FyZFtyb3ddW2NvbF0uY2FuSGl0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ib2FyZFtyb3ddW2NvbF0uY2FuSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0dhbWVPdmVyKCkge1xuICAgICAgICBsZXQgZG9uZSA9IGZhbHNlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZC5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5ib2FyZFswXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkW2ldW2pdLmhhc1NoaXAgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbaV1bal0uU2hpcEluZm8uaXNTdW5rKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FuUGxhY2Uoc2hpcCwgcm93LCBjb2wsIHZlcnRpY2FsKSB7XG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgaWYgKChyb3cgKyBzaGlwLmxlbmd0aCkgPiAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuXG4gICAgICAgIGlmICgoY29sICsgc2hpcC5sZW5ndGgpID4gMTApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJoYXNTaGlwXCIgaW4gdGhpcy5ib2FyZFtyb3craV1bY29sXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ib2FyZFtyb3cgKyBpXVtjb2xdLmhhc1NoaXAgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaGlwLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiaGFzU2hpcFwiIGluIHRoaXMuYm9hcmRbcm93XVtjb2wral0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmRbcm93XVtjb2wgKyBqXS5oYXNTaGlwID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWVib2FyZCIsImltcG9ydCBIYW5kbGVDb29yZHMsIHsgY3JlYXRlU2hpcHMsIHRpbWVUb1BsYWNlIH0gZnJvbSAnLi9pbmRleCdcbmltcG9ydCBTaGlwIGZyb20gJy4vU2hpcCdcblxuZnVuY3Rpb24gdGV4dFRhbGsob2JqZWN0KSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9iamVjdC50ZXh0Q29udGVudCA9IFwiTGV0J3Mgc3RhcnQgd2l0aCB5b3VyIGJpZ2dlc3Qgc2hpcCwgdGhlIENhcnJpZXIuXCJcbiAgICAgICAgY3JlYXRlU2hpcHMoMClcbiAgICB9LCAxMDAwKVxufVxuXG5mdW5jdGlvbiBlcnJvckhhbmRsZXIob2JqZWN0LCBudW1iZXIpIHtcbnN3aXRjaCAobnVtYmVyKSB7XG4gICAgY2FzZSAwIDpcbiAgICAgICAgb2JqZWN0LnRleHRDb250ZW50ID0gXCJUaGF0J3Mgbm90IHRoZSBib2FyZCwgbWF0ZS5cIlxuICAgICAgICBicmVha1xuICAgIGNhc2UgMSA6XG4gICAgICAgIG9iamVjdC50ZXh0Q29udGVudCA9IFwiWW91IGNhbid0IHBsYWNlIGl0IHRoZXJlLCBtYXRlLlwiXG4gICAgICAgIGJyZWFrXG4gICAgY2FzZSAyIDpcbiAgICAgICAgb2JqZWN0LnRleHRDb250ZW50ID0gXCJXZSBrbm93IHRoZXJlJ3Mgbm90aGluZyB0aGVyZSwgY2FwdGFpbiEgUGljayBhIGRpZmZlcmVudCBzcG90LlwiXG4gICAgICAgIGJyZWFrXG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaGlwQ3JlYXRpb25IYW5kbGVyKG9iamVjdCwgc2hpcHR5cGUpIHtcbnN3aXRjaCAoc2hpcHR5cGUubmFtZSkge1xuICAgIGNhc2UgJ0NhcnJpZXInIDpcbiAgICAgICAgb2JqZWN0LnRleHRDb250ZW50ID0gXCJXaGVyZSB3b3VsZCB5b3UgbGlrZSB0byBwbGFjZSB5b3VyIENhcnJpZXI/XCJcbiAgICAgICAgdGltZVRvUGxhY2Uoc2hpcHR5cGUpXG4gICAgICAgIGJyZWFrXG4gICAgY2FzZSAnQmF0dGxlc2hpcCcgOlxuICAgICAgICBvYmplY3QudGV4dENvbnRlbnQgPSBcIkhvdyBhYm91dCB0aGUgQmF0dGxlc2hpcD9cIlxuICAgICAgICB0aW1lVG9QbGFjZShzaGlwdHlwZSlcbiAgICAgICAgYnJlYWtcbiAgICBjYXNlICdDcnVpc2VyJyA6XG4gICAgICAgIG9iamVjdC50ZXh0Q29udGVudCA9ICdIb3cgYWJvdXQgdGhlIENydWlzZXIgc2hpcD8nXG4gICAgICAgIHRpbWVUb1BsYWNlKHNoaXB0eXBlKVxuICAgICAgICBicmVha1xuICAgIGNhc2UgJ1N1Ym1hcmluZScgOlxuICAgICAgICBvYmplY3QudGV4dENvbnRlbnQgPSBcIkNhbid0IGZvcmdldCBhYm91dCBvdXIgc3VibWFyaW5lcyBub3csIGNhbiB3ZT9cIlxuICAgICAgICB0aW1lVG9QbGFjZShzaGlwdHlwZSlcbiAgICAgICAgYnJlYWtcbiAgICBjYXNlICdEZXN0cm95ZXInIDpcbiAgICAgICAgb2JqZWN0LnRleHRDb250ZW50ID0gXCJMYXN0LCBidXQgbm90IGxlYXN0LCBvdXIgJ0Rlc3Ryb3llcic/XCJcbiAgICAgICAgdGltZVRvUGxhY2Uoc2hpcHR5cGUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxufVxuXG5cblxuZXhwb3J0IHsgdGV4dFRhbGssIGVycm9ySGFuZGxlciwgc2hpcENyZWF0aW9uSGFuZGxlciB9IiwiaW1wb3J0IFBsYXllciBmcm9tICcuL1BsYXllci5qcydcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSAnLi9HYW1lYm9hcmQuanMnXG5pbXBvcnQgU2hpcCBmcm9tICcuL1NoaXAuanMnXG5pbXBvcnQgeyBlcnJvckhhbmRsZXIsIHNoaXBDcmVhdGlvbkhhbmRsZXIsIHRleHRUYWxrIH0gZnJvbSAnLi9Eb21NYW5pcC5qcydcblxuLy9zaGlwc1xuY29uc3QgQXZhaWxhYmxlU2hpcHMgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAnQ2FycmllcicsXG4gICAgICAgIGxlbmd0aDogNVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnQmF0dGxlc2hpcCcsXG4gICAgICAgIGxlbmd0aDogNFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnQ3J1aXNlcicsXG4gICAgICAgIGxlbmd0aDogM1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnU3VibWFyaW5lJyxcbiAgICAgICAgbGVuZ3RoOiAzXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdEZXN0cm95ZXInLFxuICAgICAgICBsZW5ndGg6IDJcbiAgICB9XG5dXG5cbi8vZ2FtZSBsb29wXG5jb25zdCBTdGFydEdhbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cInN0YXJ0XCJdJylcbmNvbnN0IFN0YXR1c0FyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cInN0YXR1c1wiXScpXG5jb25zdCBlbnRlclBsYXllck9uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwicGxheWVyT25lTmFtZVNlbGVjdG9yXCJdJylcbmNvbnN0IGVudGVyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwiZW50ZXJOYW1lXCJdJylcbmNvbnN0IG5hbWVDaG9zZW5QbGF5ZXJPbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cIm5hbWVDaG9zZW5QbGF5ZXJPbmVcIl0nKVxuY29uc3QgcGxheWVyT25lTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwicGxheWVyR3JpZE5hbWVcIl0nKVxuXG4vLy8vLy9wbGF5ZXIgZ3JpZHNcbmNvbnN0IHBsYXllck9uZUdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cImdyaWRQbGF5ZXJPbmVcIl0nKVxuY29uc3QgcGxheWVyVHdvR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwiZ3JpZFBsYXllclR3b1wiXScpXG5cbi8vY3JlYXRlIGdhbWVcblN0YXJ0R2FtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBTdGFydEdhbWUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgZW50ZXJQbGF5ZXJPbmUuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiXG59KVxuXG5sZXQgcGxheWVyT25lXG5cbmVudGVyTmFtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBsZXQgbmFtZVBsYXllck9uZSA9ICdtYXRlJ1xuICAgIGlmIChuYW1lQ2hvc2VuUGxheWVyT25lLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgIHBsYXllck9uZU5hbWUudGV4dENvbnRlbnQgPSAnWU9VUiBGTEVFVCdcbiAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lUGxheWVyT25lID0gbmFtZUNob3NlblBsYXllck9uZS52YWx1ZVxuICAgICAgICBwbGF5ZXJPbmVOYW1lLnRleHRDb250ZW50ID0gYCR7bmFtZVBsYXllck9uZS50b1VwcGVyQ2FzZSgpfSdTIEZMRUVUYFxuICAgICAgICBuYW1lQ2hvc2VuUGxheWVyT25lLnZhbHVlID0gXCJcIlxuICAgIH1cbiAgICBlbnRlclBsYXllck9uZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbiAgICBTdGF0dXNBcmVhLnRleHRDb250ZW50ID0gYFRpbWUgdG8gcGxhY2UgeW91ciBzaGlwcywgJHtuYW1lUGxheWVyT25lfS5gXG4gICAgdGV4dFRhbGsoU3RhdHVzQXJlYSlcbiAgICBcbiAgICBhZGRHcmlkKHBsYXllck9uZUdhbWVib2FyZCwgcGxheWVyT25lR3JpZCwgXCJwbGF5ZXIxXCIpXG4gICAgYWRkR3JpZChwbGF5ZXJUd29HYW1lYm9hcmQsIHBsYXllclR3b0dyaWQsIFwicGxheWVyMlwiKVxuXG4gICAgcGxheWVyT25lID0gbmV3IFBsYXllcihgJHtuYW1lUGxheWVyT25lfWApXG59KVxuXG5sZXQgcGxheWVyT25lR2FtZWJvYXJkID0gbmV3IEdhbWVib2FyZFxubGV0IHBsYXllclR3b0dhbWVib2FyZCA9IG5ldyBHYW1lYm9hcmRcbmxldCBwbGF5ZXJUd28gPSBuZXcgUGxheWVyKFwiTXIuIEJvdFwiKVxuXG4vLy8vbWFpbiBwbGF5ZXJcblxuLy8vZ2FtZWJvYXJkXG5mdW5jdGlvbiBhZGRHcmlkKGdhbWVib2FyZCwgZ3JpZCwgcGxheWVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lYm9hcmQuYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8IGdhbWVib2FyZC5ib2FyZC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IFwicGxheWVyMVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeENvb3JkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHhDb29yZC50ZXh0Q29udGVudCA9IGAke2kgKzF9YFxuICAgICAgICAgICAgICAgICAgICAgICAgeENvb3JkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2VsbENvb3JkJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZCh4Q29vcmQpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjZWxsJylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLXlDb29yZCcsIGkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS14Q29vcmQnLCBqKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZChjZWxsKSAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGxheWVyID09PSBcInBsYXllcjJcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NlbGwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEteUNvb3JkJywgaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLXhDb29yZCcsIGogKzEpXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkLmFwcGVuZENoaWxkKGNlbGwpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4Q29vcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgICAgICAgICAgICAgeENvb3JkLnRleHRDb250ZW50ID0gYCR7aSArMX1gXG4gICAgICAgICAgICAgICAgICAgICAgICB4Q29vcmQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjZWxsQ29vcmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZCh4Q29vcmQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU2hpcHMoc2hpcE51bWJlcikge1xuICAgIGlmIChzaGlwTnVtYmVyID09PSA1KSB7XG4gICAgICAgIGRvbmVTaGlwUGxhY2VtZW50KClcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHNoaXAgPSBuZXcgU2hpcChBdmFpbGFibGVTaGlwc1tzaGlwTnVtYmVyXS5uYW1lLCBBdmFpbGFibGVTaGlwc1tzaGlwTnVtYmVyXS5sZW5ndGgpXG4gICAgc2hpcENyZWF0aW9uSGFuZGxlcihTdGF0dXNBcmVhLCBzaGlwKVxufVxuXG5sZXQgeiA9IDFcbmZ1bmN0aW9uIHRpbWVUb1BsYWNlKHNoaXApIHtcbiAgICBwbGF5ZXJPbmVHcmlkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2VsbCcpKSB7XG4gICAgICAgICAgICBpZiAocGxheWVyT25lR2FtZWJvYXJkLmNhblBsYWNlKHNoaXAsIHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQueWNvb3JkKSwgcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC54Y29vcmQpLCBmYWxzZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJPbmVHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAsIHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQueWNvb3JkKSwgcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC54Y29vcmQpLCBmYWxzZSlcbiAgICAgICAgICAgICAgICBjcmVhdGVTaGlwcyh6KVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBsYXllck9uZUdhbWVib2FyZC5ib2FyZClcbiAgICAgICAgICAgICAgICB6KytcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JIYW5kbGVyKFN0YXR1c0FyZWEsIDEpXG4gICAgICAgICAgICAgICAgdGltZVRvUGxhY2Uoc2hpcClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9ySGFuZGxlcihTdGF0dXNBcmVhLCAwKVxuICAgICAgICAgICAgdGltZVRvUGxhY2Uoc2hpcClcbiAgICAgICAgfVxuICAgIH0sIHtvbmNlOiB0cnVlfSlcbn1cblxuLy8vL0FJIHBsYWNlbWVudFxuXG5mdW5jdGlvbiBkb25lU2hpcFBsYWNlbWVudCgpIHtcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJPbmUpXG4gICAgU3RhdHVzQXJlYS50ZXh0Q29udGVudCA9IFwiQWxyaWdodCwgeW91J3JlIGFsbCBzZXQgbWF0ZSFcIlxuXG4gICAgLy9BSSByYW5kb20gcGxhY2VtZW50XG4gICAgQXZhaWxhYmxlU2hpcHMuZm9yRWFjaChzaGlwID0+IHtcbiAgICAgICAgcGxheWVyVHdvLnJhbmRvbVBsYWNlbWVudChwbGF5ZXJUd29HYW1lYm9hcmQsIHNoaXApXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJUd29HYW1lYm9hcmQpXG59XG5cbmV4cG9ydCB7IHRpbWVUb1BsYWNlLCBjcmVhdGVTaGlwcyB9IiwiY2xhc3MgU2hpcCB7XG4gICAgY29uc3RydWN0b3IgKG5hbWUsIGxlbmd0aCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoXG4gICAgICAgIHRoaXMuaGl0cyA9IFtdXG4gICAgfVxuXG4gICAgaGl0KG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5oaXRzLmluY2x1ZGVzKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaXRzLnB1c2gobnVtYmVyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTdW5rKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaXRzLmxlbmd0aCA9PT0gdGhpcy5sZW5ndGhcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoaXAiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0aGlzIiwiYXR0YWNrIiwicm93IiwiY29sIiwiZ2FtZWJvYXJkIiwiYm9hcmQiLCJjYW5IaXQiLCJyZWNlaXZlQXR0YWNrIiwicmFuZG9tQXR0YWNrIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tUGxhY2VtZW50Iiwic2hpcCIsInZlcnRpY2FsIiwidmVydGljYWxSYW5kb21pemVyIiwiY2FuUGxhY2UiLCJwYXJzZUludCIsInBsYWNlU2hpcCIsIklzVmVydGljYWwiLCJjcmVhdGVHcmlkIiwic2l6ZSIsIlNoaXAiLCJpIiwibGVuZ3RoIiwiU2hpcEluZm8iLCJoYXNTaGlwIiwiaiIsImhpdGluZGV4IiwiaGl0cyIsImhpdCIsImNhbkF0dGFjayIsImlzR2FtZU92ZXIiLCJkb25lIiwiaXNTdW5rIiwiZXJyb3JIYW5kbGVyIiwib2JqZWN0IiwibnVtYmVyIiwidGV4dENvbnRlbnQiLCJBdmFpbGFibGVTaGlwcyIsIlN0YXJ0R2FtZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIlN0YXR1c0FyZWEiLCJlbnRlclBsYXllck9uZSIsImVudGVyTmFtZSIsIm5hbWVDaG9zZW5QbGF5ZXJPbmUiLCJwbGF5ZXJPbmVOYW1lIiwicGxheWVyT25lR3JpZCIsInBsYXllclR3b0dyaWQiLCJwbGF5ZXJPbmUiLCJhZGRFdmVudExpc3RlbmVyIiwic3R5bGUiLCJkaXNwbGF5IiwibmFtZVBsYXllck9uZSIsInZhbHVlIiwidG9VcHBlckNhc2UiLCJzZXRUaW1lb3V0IiwiY3JlYXRlU2hpcHMiLCJhZGRHcmlkIiwicGxheWVyT25lR2FtZWJvYXJkIiwicGxheWVyVHdvR2FtZWJvYXJkIiwicGxheWVyVHdvIiwiZ3JpZCIsInBsYXllciIsInhDb29yZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNlbGwiLCJzaGlwTnVtYmVyIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJpbmNsdWRlcyIsInB1c2giLCJzaGlwdHlwZSIsInRpbWVUb1BsYWNlIiwic2hpcENyZWF0aW9uSGFuZGxlciIsInoiLCJlIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJkYXRhc2V0IiwieWNvb3JkIiwieGNvb3JkIiwib25jZSJdLCJzb3VyY2VSb290IjoiIn0=